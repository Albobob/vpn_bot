import os
import logging
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from django.core.management import call_command
from django.core.wsgi import get_wsgi_application
from dotenv import load_dotenv
import django
import qrcode
from io import BytesIO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vpn_project.settings')
django.setup()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
from vpn_bot.models import TelegramUser, WireGuardPeer
from vpn_bot.views import generate_wireguard_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    telegram_user, created = TelegramUser.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
        }
    )
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è WireGuard VPN.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/newvpn - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å VPN\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/newvpn - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é\n"
        "–°–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é WireGuard –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ—ë –≤–∞–º –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ –∏ QR-–∫–æ–¥–∞.\n\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å VPN\n"
        "–ü–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    
    await update.message.reply_text(help_message)

async def newvpn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newvpn"""
    user = update.effective_user
    telegram_user = TelegramUser.objects.get(telegram_id=user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π peer
    if hasattr(telegram_user, 'peer') and telegram_user.peer.is_active:
        await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."
        )
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ —Å–æ–∑–¥–∞–µ–º peer
        private_key = os.popen('wg genkey').read().strip()
        public_key = os.popen(f'echo {private_key} | wg pubkey').read().strip()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IP –∞–¥—Ä–µ—Å (–ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä)
        last_peer = WireGuardPeer.objects.order_by('-client_ip').first()
        if last_peer:
            last_ip = int(last_peer.client_ip.split('.')[-1])
            new_ip = f"10.0.0.{last_ip + 1}"
        else:
            new_ip = "10.0.0.2"
        
        # –°–æ–∑–¥–∞–µ–º peer
        peer = WireGuardPeer.objects.create(
            user=telegram_user,
            public_key=public_key,
            private_key=private_key,
            client_ip=new_ip
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = generate_wireguard_config(peer)
        
        # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(config)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        buffer.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await update.message.reply_document(
            document=BytesIO(config.encode()),
            filename=f"wg-{new_ip}.conf",
            caption="–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥
        await update.message.reply_photo(
            photo=buffer,
            caption="QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        )
        
        await update.message.reply_text(
            "–í–∞—à–∞ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞! "
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
        
    except Exception as e:
        logger.error(f"Error creating VPN config: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    user = update.effective_user
    telegram_user = TelegramUser.objects.get(telegram_id=user.id)
    
    if not hasattr(telegram_user, 'peer'):
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newvpn –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."
        )
        return
    
    peer = telegram_user.peer
    status_message = (
        f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π VPN –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n\n"
        f"IP –∞–¥—Ä–µ—Å: {peer.client_ip}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if peer.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
        f"–°–æ–∑–¥–∞–Ω–∞: {peer.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )
    
    if peer.last_handshake:
        status_message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {peer.last_handshake.strftime('%d.%m.%Y %H:%M')}"
    
    await update.message.reply_text(status_message)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(os.getenv('TELEGRAM_BOT_TOKEN')).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("newvpn", newvpn))
    application.add_handler(CommandHandler("status", status))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 